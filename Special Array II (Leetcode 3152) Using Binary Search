class Solution {
    public boolean binarySearch(int start , int end , List<Integer> violatedArr){
        int l = 0;
        int r = violatedArr.size() - 1;
        while(l <= r){
            int mid = l + (r - l) / 2;
            int index = violatedArr.get(mid);
            if(index < start)
                l = mid + 1;
            else if(index > end)
                r = mid - 1;
            else
                return true;
        }
        return false;
    }
    public boolean[] isArraySpecial(int[] nums, int[][] queries) {
        int n = nums.length;
        List<Integer> violatedArr = new ArrayList<>();
        for(int i = 1; i < n; i++){
            if(nums[i] % 2 == nums[i - 1] % 2)
                violatedArr.add(i);
        }

        boolean answer[] = new boolean[queries.length];
        for(int i = 0; i < queries.length ; i++){
            if(binarySearch(queries[i][0] + 1, queries[i][1] , violatedArr))
                answer[i] = false;
            else
                answer[i] = true;
        }
        return answer;
    }
}
